version: '3.8'

services:

  frontend:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - event_service
      - user_service
      - notifier_service
    networks:
      - app-network


  event_service:
    build: ./event_service
    expose:
      - "5001"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      RABBITMQ_HOST: rabbitmq
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:5001/healthy"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: on-failure
    networks:
      - app-network


  user_service:
    build: ./user_service
    expose:
      - "5002"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB} # Needed by get_db_connection()
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: on-failure
    networks:
      - app-network


  notifier_service:
    build: ./notifier_service
    expose:
      - "5003"
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:5003/health"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: on-failure
    networks:
      - app-network

  db:
    image: postgresql:13
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - distribuzz_db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck: # Check if DB is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network


  rabbitmq:
    image: rabbitmq:3-management-alpine # Includes management UI on port 15672
    environment: # Pulled from .env file
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672" # RabbitMQ management UI
      # - "5672:5672" # AMQP port - exposed by default, can be explicitly added if needed for external tools
    healthcheck: # Basic health check for RabbitMQ
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - app-network


  redis:
    image: redis:latest
    restart: always
    expose: # Only expose internally to app-network
      - "6379"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge # Default bridge network for services

# --- Docker Volumes for Data Persistence ---
volumes:
  distribuzz_db_data: # Named volume for PostgreSQL data
